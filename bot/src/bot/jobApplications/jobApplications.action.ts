import { Action, Ctx, Message, Update } from 'nestjs-telegraf';
import { JobApplicationsService } from '../../api/job_applications/job_applications.service';
import { IContext } from '../../interfaces/context.interface';
import { EnumJobApplicationStatus } from '../../shared/enums/job_application_status.enum';
import { JobApplicationMessageService } from '../services/JobApplicationMessageService.service';
import { NotificationService } from '../services/notification.service';

@Update()
export class JobApplicationsAction {
  constructor(
    private readonly jobApplicationsApi: JobApplicationsService,
    private readonly notificationService: NotificationService,
    private readonly jobApplicationMessageService: JobApplicationMessageService,
  ) {}

  @Action(/^review_(\d+)$/)
  async statusReview(@Message('text') message: string, @Ctx() ctx: IContext) {
    const messageNotification = `
			üü° <b>–í–∞—à –æ—Ç–∫–ª–∏–∫ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª –Ω–∞—Å!</b>
			
			HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª –≤–∞—à –æ—Ç–∫–ª–∏–∫ –∏ —Ä–µ—à–∏–ª –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤–∞—Å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø.
			
			üìû –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —à–∞–≥–æ–≤.
			–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏!
		`;

    const jobApplicationId = +ctx.match[1];
    const jobApplication = await this.jobApplicationsApi.updateStatus(
      jobApplicationId,
      EnumJobApplicationStatus.REVIEW,
    );
    await ctx.deleteMessage();

    await this.notificationService.sendNotification(
      jobApplication.user.idTg,
      messageNotification,
    );

    await this.jobApplicationMessageService.sendMessage(ctx, jobApplicationId);
  }

  @Action(/^reject_(\d+)$/)
  async statusRejection(@Ctx() ctx: IContext) {
    const messageNotification = `
			‚ùå <b>–í–∞—à –æ—Ç–∫–ª–∏–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω</b>
			
			–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.
			–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏.
			–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥—Ä—É–≥—É—é –ø–æ–∑–∏—Ü–∏—é.
			
			üì¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ!
		`;

    const jobApplicationId = +ctx.match[1];
    const jobApplication = await this.jobApplicationsApi.updateStatus(
      jobApplicationId,
      EnumJobApplicationStatus.REJECTION,
    );
    await ctx.deleteMessage();

    await this.notificationService.sendNotification(
      jobApplication.user.idTg,
      messageNotification,
    );

    await this.jobApplicationMessageService.sendMessage(ctx, jobApplicationId);
  }

  @Action(/^accept_(\d+)$/)
  async statusAccept(@Ctx() ctx: IContext) {
    const messageNotification = `
			‚úÖ <b>–ü–æ–ª—É—á–∞–µ—Ç—Å—è –º—ã —É–∂–µ –ø–æ—á—Ç–∏ –∫–æ–ª–ª–µ–≥–∏</b>
			
			–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤–∞—Å —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã! üöÄ
		`;

    const jobApplicationId = +ctx.match[1];
    const jobApplication = await this.jobApplicationsApi.updateStatus(
      jobApplicationId,
      EnumJobApplicationStatus.ACCEPT,
    );
    await ctx.deleteMessage();

    await this.notificationService.sendNotification(
      jobApplication.user.idTg,
      messageNotification,
    );

    await this.jobApplicationMessageService.sendMessage(ctx, jobApplicationId);
  }
}
