import type { IContext } from '../../interfaces/context.interface';

export async function errorUtils(ctx: IContext, error: Error) {
  // 1. –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
  await ctx.reply(
    '‚ö†Ô∏è –í—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π!\n\n' +
      '–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º. üôè\n\n' +
      '–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.',
  );

  // 2. –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª
  try {
    const errorMessage =
      `üö® –û—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n` +
      `üë§ Telegram ID: ${ctx.from?.id}\n` +
      `‚ùó –û—à–∏–±–∫–∞: ${error.message}\n` +
      `üïí –í—Ä–µ–º—è: ${new Date().toISOString()}`;

    if (!process.env.TG_CHANNEL_ERROR_ID) {
      return new Error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω TG_CHANNEL_ERROR_ID');
    }

    await ctx.telegram.sendMessage(
      process.env.TG_CHANNEL_ERROR_ID,
      errorMessage,
    );
  } catch (sendError) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ –∫–∞–Ω–∞–ª:', sendError);
  }
}
