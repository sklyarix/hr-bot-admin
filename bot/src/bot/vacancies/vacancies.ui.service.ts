import { Injectable } from '@nestjs/common';
import { Markup } from 'telegraf';
import { VacanciesService } from '../../api/vacancies/vacancies.service';
import type { IContext } from '../../interfaces/context.interface';
import { errorUtils } from '../utils/error.utils';
import { mainMenuButtons } from '../utils/menuButtons';

@Injectable()
export class VacanciesUiService {
  constructor(private readonly vacanciesApi: VacanciesService) {}

  async sendList(ctx: IContext) {
    try {
      const idTg = ctx.from?.id?.toString();
      if (!idTg) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à Telegram ID.');
        return;
      }

      const allVacancy = await this.vacanciesApi.getAll();
      if (allVacancy.length === 0) {
        await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π');
        return;
      }
      await ctx.reply('üìå –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏', mainMenuButtons());

      await ctx.reply(
        '–í–∞–∫–∞–Ω—Å–∏–∏:',
        Markup.inlineKeyboard(
          allVacancy.map((vacancy) => [
            Markup.button.callback(
              `‚ö°Ô∏èÔ∏è ${vacancy.name}`,
              `vacancy_${vacancy.id}`,
            ),
          ]),
        ),
      );
    } catch (error) {
      await errorUtils(ctx, error as Error);
    }
  }
}
