import { Action, Ctx, Update } from 'nestjs-telegraf';
import { Markup } from 'telegraf';
import { VacanciesService } from '../../api/vacancies/vacancies.service';
import type { IContext } from '../../interfaces/context.interface';
import { errorUtils } from '../utils/error.utils';
import * as path from 'node:path';
import { VacanciesUiService } from './vacancies.ui.service';

@Update()
export class VacanciesAction {
  constructor(
    private readonly vacanciesApi: VacanciesService,
    private readonly vacanciesUi: VacanciesUiService,
  ) {}

  @Action(/^vacancy_(\d+)$/)
  async vacancy(@Ctx() ctx: IContext) {
    try {
      const idVacancy = +ctx.match[1];
      const vacancy = await this.vacanciesApi.getId(idVacancy);

      // TODO: –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º descr –∏ testTask (–Ω–∞ url)

      const buttonsVacancy = Markup.inlineKeyboard([
        [Markup.button.url('üìÑ –û–ø–∏—Å–∞–Ω–∏–µ', vacancy.description)].concat(
          vacancy.testTask
            ? [Markup.button.url('üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ', vacancy.testTask)]
            : [],
        ),
        [
          Markup.button.callback('‚úÖ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è', `job_application`),
          Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_vacancies'),
        ],
      ]);

      const messageText = `üíº ${vacancy.name}\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è`;

      ctx.session.vacancy = {
        id: vacancy.id,
        name: vacancy.name,
        testTask: vacancy.testTask,
      };

      if (vacancy.img) {
        const localPath = path.resolve(
          process.cwd(),
          'uploads',
          path.basename(vacancy.img),
        );
        await ctx.sendPhoto(
          { source: localPath },
          {
            caption: messageText,
            reply_markup: buttonsVacancy.reply_markup,
          },
        );
      } else {
        await ctx.reply(messageText, buttonsVacancy);
      }
    } catch (error) {
      await errorUtils(ctx, error as Error);
    }
  }

  @Action('back_to_vacancies')
  async backToVacancies(@Ctx() ctx: IContext) {
    await ctx.answerCbQuery();
    await this.vacanciesUi.sendList(ctx);
  }

  @Action('job_application')
  async jobApplication(@Ctx() ctx: IContext) {
    try {
      await ctx.deleteMessage();

      if (!ctx.session.vacancy) {
        await ctx.reply('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–±–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏');
        await this.vacanciesUi.sendList(ctx);
        return;
      }

      if (ctx.session.vacancy.testTask) {
        await this.testTask(ctx, ctx.session.vacancy.testTask);
      } else {
        await ctx.scene.enter('scene_job_application');
      }
    } catch (error) {
      await errorUtils(ctx, error as Error);
    }
  }

  @Action('scene_job_application')
  async onTestTaskFinished(@Ctx() ctx: IContext) {
    await ctx.answerCbQuery(); // –∑–∞–∫—Ä—ã—Ç—å "–∑–∞–≥—Ä—É–∑–∫–∞"
    await ctx.scene.enter('scene_job_application');
  }

  // =====================
  // üëá –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Å—Ç–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏
  // =====================
  private async testTask(ctx: IContext, testTask: string): Promise<void> {
    await ctx.reply(
      '' +
        '–ü–µ—Ä–µ–¥ –∫–∞–∫ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –¥–∞–Ω–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ "–í—ã–ø–æ–ª–Ω–∏–ª".',
      Markup.inlineKeyboard([
        [
          Markup.button.url('üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ', testTask),
          Markup.button.callback('–í—ã–ø–æ–ª–Ω–∏–ª', 'scene_job_application'),
        ],
        [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_vacancies')],
      ]),
    );
  }
}
