import { Injectable } from '@nestjs/common';
import { Action, Ctx, Message, On, Scene, SceneEnter } from 'nestjs-telegraf';
import { Markup } from 'telegraf';
import { JobApplicationsService } from '../../../api/job_applications/job_applications.service';
import { ResumeQuestionsService } from '../../../api/resume_questions/resume_questions.service';
import { ResumesService } from '../../../api/resumes/resumes.service';
import { UserProfilesService } from '../../../api/user_profiles/user_profiles.service';
import { UsersService } from '../../../api/users/users.service';

import { IContext } from '../../../interfaces/context.interface';
import { EnumJobApplicationStatus } from '../../../shared/enums/job_application_status.enum';
import { IUser } from '../../../shared/user/user.interface';
import { JobApplicationMessageService } from '../../services/JobApplicationMessageService.service';
import { errorUtils } from '../../utils/error.utils';
import { mainMenuButtons } from '../../utils/menuButtons';
import { VacanciesUiService } from '../vacancies.ui.service';

interface IQuestion {
  name: string;
  message: string;
  validator: (input: string) => boolean;
  errorMessage: string;
}

@Injectable()
@Scene('scene_job_application')
export class SceneJobApplication {
  // –í–æ–ø—Ä–æ—Å—ã –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É
  private allQuestion: IQuestion[] = [];
  constructor(
    private readonly usersApi: UsersService,
    private readonly userProfileApi: UserProfilesService,
    private readonly vacanciesUi: VacanciesUiService,
    private readonly resumeApi: ResumesService,
    private readonly resumeQuestionsApi: ResumeQuestionsService,
    private readonly jobApplicationsApi: JobApplicationsService,
    private readonly jobApplicationMessageService: JobApplicationMessageService,
  ) {}

  @SceneEnter()
  async onSceneEnter(ctx: IContext) {
    try {
      const idTg = ctx.from?.id?.toString();
      if (!idTg) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à Telegram ID.');
        await ctx.scene.leave();
        return this.vacanciesUi.sendList(ctx);
      }
      ctx.session.scene_job_application = {
        idTg: idTg,
        currentQuestion: 0,
        answers: [],
      };
      await ctx.reply(
        `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –±—É–¥—É—â–∏–π –∫–æ–ª–ª–µ–≥–∞! \n\n–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º—É–ª—å—Ç–∏–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω–æ–º—É –∞–≥–µ–Ω—Ç—Å—Ç–≤—É FABRIKA –∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª–∏–¥–µ—Ä–∞–º–∏ –Ω–∏—à–∏ iGaming, –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç.\n\n–ú—ã —Ü–µ–Ω–∏–º —Ç–≤–æ–µ –≤—Ä–µ–º—è –∏ –Ω–∞—à–∞ –±–µ—Å–µ–¥–∞ –±—É–¥–µ—Ç –±–æ–ª–µ–µ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π, –µ—Å–ª–∏ —Ç—ã –ø—Ä–æ–π–¥–µ—à—å —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å –¥–æ –∫–æ–Ω—Ü–∞ ü§ù`,
        Markup.keyboard([['‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–∞–∫–∞–Ω—Å–∏–π']]).resize(),
      );
      if (ctx.session.vacancy?.testTask) {
        await ctx.reply(`–û—Ç–ø—Ä–∞–≤—å —Ä–µ—à–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ`);
      } else {
        await this.start(ctx);
      }
    } catch (error) {
      await errorUtils(ctx, error as Error);
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    /// –µ—Å–ª–∏ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ–º –∑–∞–Ω–æ–≤–æ

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    // fullName age city

    // –ï—Å—Ç—å –ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–µ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏?

    // –ï—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∫ –≤–∞–∫–∞–Ω—Å–∏–∏?

    //–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î –∏ –ì—Ä—É–ø–ø—É
  }

  @Action('__old_profile')
  async oldProfile(ctx: IContext) {
    await ctx.deleteMessage();
    ctx.session.scene_job_application.currentQuestion = 2;

    await this.nextField(ctx);
  }

  @Action('__new_profile')
  async newProfile(ctx: IContext) {
    await ctx.deleteMessage();
    await this.askField(ctx);
  }

  private async nextField(ctx: IContext) {
    ctx.session.scene_job_application.currentQuestion++;

    if (
      ctx.session.scene_job_application.currentQuestion <
      this.allQuestion.length
    ) {
      await this.askField(ctx);
    } else {
      await this.create_jobResponses(ctx);
    }
  }

  private async askField(ctx: IContext) {
    const currentField =
      this.allQuestion[ctx.session.scene_job_application.currentQuestion];
    await ctx.reply(currentField.message);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
  private async checkRelevanceProfile(ctx: IContext, user: IUser) {
    const textInfo = `–í—ã —Ä–∞–Ω–µ–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å —É –Ω–∞—Å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é. \n \n –î–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç? \n\n –§–ò–û: ${user.profile.fullName} \n –í–æ–∑—Ä–∞—Å—Ç: ${user.profile.age} \n –ì–æ—Ä–æ–¥: ${user.profile.city} `;
    const buttons = Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –î–∞', '__old_profile')],
      [Markup.button.callback('‚ùå –ù–µ—Ç', '__new_profile')],
    ]);
    await ctx.reply(textInfo, buttons);
  }

  // –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Profile –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫
  private async create_jobResponses(ctx: IContext) {
    try {
      let user: IUser;

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
      if (ctx.session.scene_job_application.profile_name) {
        const profile = {
          fullName: ctx.session.scene_job_application.profile_name,
          age: ctx.session.scene_job_application.profile_age,
          city: ctx.session.scene_job_application.profile_city,
        };

        user = await this.userProfileApi.updateUserProfile(
          profile,
          ctx.session.scene_job_application.idTg,
        );
      } else {
        user = await this.usersApi.findUserByIdTg(
          ctx.session.scene_job_application.idTg,
        );
      }

      //–†–µ–∑—é–º–µ
      const dataResume = {
        portfolioLink: ctx.session.scene_job_application.portfolio || '',
        salary: ctx.session.scene_job_application.salary || '',
        userId: user.id,
        answers: ctx.session.scene_job_application.answers,
      };
      const resume = await this.resumeApi.create(dataResume);

      // –û—Ç–∫–ª–∏–∫
      const dataJobApplication = {
        testTaskResult: ctx.session.scene_job_application.testTaskResult || '',
        status: EnumJobApplicationStatus.NO_REVIEW,
        userId: user.id,
        resumeId: resume.id,
        vacancyId: ctx.session.vacancy!.id,
      };
      const jobApplication =
        await this.jobApplicationsApi.create(dataJobApplication);

      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
      await this.jobApplicationMessageService.sendMessage(
        ctx,
        jobApplication.id,
      );

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ü–µ–Ω—É
      await ctx.reply(
        '–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! \n\nHR –∏–∑—É—á–∏—Ç –∏ –Ω–∞–ø–∏—à–µ—Ç —Ç–µ–±–µ ü§ù',
        mainMenuButtons(),
      );
      await ctx.scene.leave();
    } catch (error) {
      await errorUtils(ctx, error as Error);
    }
  }

  // –°–æ–±—Ä–∞—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ allQuestion
  private async buildQuestion(ctx: IContext) {
    try {
      ctx.session.scene_job_application.answers = [];
      const apiQuestions = await this.resumeQuestionsApi.getAll();
      const dynamicQuestions: IQuestion[] = apiQuestions.map((q) => {
        return {
          name: `question_${q.id}`,
          message: q.text,
          validator: (input: string) => {
            if (q.minLength && input.trim().length < q.minLength) {
              return false;
            }
            if (q.validationRegex) {
              try {
                const regex = new RegExp(q.validationRegex);
                if (!regex.test(input)) return false;
              } catch (e) {
                console.warn(`Invalid regex in question ${q.id}`, e);
                return false;
              }
            }
            return true;
          },
          errorMessage: q.errorMessage || '–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
        };
      });

      const profileQuestions = [
        {
          name: 'profile_name',
          message: '–£–∫–∞–∂–∏ —Å–≤–æ–µ –§–ò–û:',
          validator: (input: string) => input.trim().split(/\s+/).length >= 2,
          errorMessage:
            '–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ —Å–ª–æ–≤–∞ (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é).',
        },
        {
          name: 'profile_age',
          message: '–£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:',
          validator: (input) => !isNaN(Number(input)) && Number(input) > 0,
          errorMessage: '–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.',
        },
        {
          name: 'profile_city',
          message: '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –ø—Ä–æ–∂–∏–≤–∞–µ—à—å?',
          validator: (input: string) => /^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s-]+$/.test(input),
          errorMessage:
            '–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã.',
        },
      ];
      const requestQuestion = [
        {
          name: 'salary',
          message: '–ö–∞–∫–∏–µ —É —Ç–µ–±—è –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è?',
          validator: (input: string) => {
            const cleaned = input.replace(/\s/g, '').toLowerCase();

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —á–∏—Å–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 120000, 150–∫, 200-250)
            const hasNumber = /\d{2,3}(\d{3})?/.test(cleaned);
            const badAnswers = [
              '–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ',
              '–Ω–æ—Ä–º',
              '–ø–æ —Ä—ã–Ω–∫—É',
              '–ª—é–±–∞—è',
              '–ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é',
              '–Ω–µ –≤–∞–∂–Ω–æ',
            ];
            const isTooVague = badAnswers.some((phrase) =>
              cleaned.includes(phrase),
            );

            return hasNumber && !isTooVague;
          },
          errorMessage:
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏–ª–∏ —Å—É–º–º—É ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: "–æ—Ç 150 000", "200‚Äì250 —Ç—ã—Å.", "–Ω–µ –Ω–∏–∂–µ 120 000".',
        },
        {
          name: 'portfolio',
          message: '–ü—Ä–∏–∫—Ä–µ–ø–∏ —Å—Å—ã–ª–∫—É –∫ —Å–≤–æ–µ–º—É –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ',
          validator: (input: string) => /^https?:\/\/.+$/.test(input),
          errorMessage:
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http(s):// (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://portfolio.me –∏–ª–∏ https://github.com/...).',
        },
      ];

      // –æ–±—ä–µ–¥–∏–Ω—è–µ–º
      this.allQuestion = [
        ...profileQuestions,
        ...dynamicQuestions,
        ...requestQuestion,
      ];
    } catch (error) {
      await errorUtils(ctx, error as Error);
    }
  }

  // –°—Ç–∞—Ä—Ç
  private async start(ctx: IContext) {
    try {
      await this.buildQuestion(ctx);
      const user = await this.usersApi.findUserByIdTg(
        ctx.session.scene_job_application.idTg,
      );

      if (
        user.profile.fullName != null ||
        user.profile.city != null ||
        user.profile.age != null
      ) {
        await this.checkRelevanceProfile(ctx, user);
      } else {
        await this.askField(ctx);
      }
    } catch (error) {
      await errorUtils(ctx, error as Error);
    }
  }

  @On('text')
  async onText(@Message('text') messageUser: string, @Ctx() ctx: IContext) {
    if (messageUser == '‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–∞–∫–∞–Ω—Å–∏–π') {
      await ctx.scene.leave();
      return this.vacanciesUi.sendList(ctx);
    }

    if (
      !ctx.session.scene_job_application.testTaskResult &&
      ctx.session.vacancy?.testTask
    ) {
      const input = messageUser.trim();

      const isValidUrl = /^https?:\/\/[^\s]+$/.test(input);

      if (!isValidUrl) {
        await ctx.reply(
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http:// –∏–ª–∏ https://',
        );
        return;
      }

      ctx.session.scene_job_application.testTaskResult = input;
      await this.start(ctx);
      return;
    }

    const { name, validator, message, errorMessage } =
      this.allQuestion[ctx.session.scene_job_application.currentQuestion];

    if (validator && !validator(messageUser)) {
      await ctx.reply(errorMessage || '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return;
    }

    if (name.startsWith('question_')) {
      console.log(
        'ctx.session.scene_job_application.answers =',
        ctx.session.scene_job_application.answers,
      );
      const questionId = Number(name.split('_')[1]); // –∏–∑–≤–ª–µ–∫–∞–µ–º –≤—Å—ë –ø–æ—Å–ª–µ "description_"
      ctx.session.scene_job_application.answers!.push({
        questionId,
        answer: messageUser,
      });
    } else {
      ctx.session.scene_job_application[name] = messageUser;
    }
    await this.nextField(ctx);
  }
}
