import { Injectable } from '@nestjs/common';
import { Markup } from 'telegraf';
import { JobApplicationsService } from '../../api/job_applications/job_applications.service';
import type { IContext } from '../../interfaces/context.interface';
import { EnumJobApplicationStatus } from '../../shared/enums/job_application_status.enum';
import type { IJobApplication } from '../../shared/job_application/job_application.interface';

@Injectable()
export class JobApplicationMessageService {
  private targetChannel = process.env.ID_GROUP_ZAYVKI || '';

  constructor(private readonly jobApplicationsApi: JobApplicationsService) {}

  private messageStatus(status: EnumJobApplicationStatus) {
    switch (status) {
      case EnumJobApplicationStatus.NO_REVIEW:
        return '‚ö™ –ù–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ ‚ö™';
      case EnumJobApplicationStatus.REVIEW:
        return 'üü† –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ üü†';
      case EnumJobApplicationStatus.ACCEPT:
        return 'üü¢ –ü—Ä–∏–Ω—è—Ç üü¢';
      case EnumJobApplicationStatus.REJECTION:
        return 'üî¥ –û—Ç–∫–∞–∑ üî¥';
    }
  }

  private buildMessage(dataJobApplication: IJobApplication): string {
    console.log('dataJobApplication =', dataJobApplication.resume.answers);

    //!!!TODDO
    const answersText =
      dataJobApplication.resume.answers
        ?.map(
          (resumeAnswer) =>
            `‚Äî <i>${resumeAnswer.question.text || '–í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω'}</i>\n${resumeAnswer.answer}`,
        )
        .join('\n\n') || '–û—Ç–≤–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';

    return `
			üìù ${this.messageStatus(dataJobApplication.status)}
			<b>id-–æ—Ç–∫–ª–∏–∫–∞:</b> <code>${dataJobApplication.id}</code>
			<b>–í–∞–∫–∞–Ω—Å–∏—è:</b> ${dataJobApplication.vacancy.name}
			<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${dataJobApplication.user.profile.fullName}
			<b>–§–ò–û:</b> ${dataJobApplication.user.profile.fullName}
			<b>–í–æ–∑—Ä–∞—Å—Ç:</b> ${dataJobApplication.user.profile.age}
			<b>–ì–æ—Ä–æ–¥:</b> ${dataJobApplication.user.profile.city}
			
			<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n${answersText}
			
			<b>–ó–∞—Ä–ø–ª–∞—Ç–Ω–∞—è –≤–∏–ª–∫–∞:</b> ${dataJobApplication.resume.salary}
	
			<b>–ü—Ä–∏–ª–æ–∂–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ:</b> ${dataJobApplication.testTaskResult || '–ù–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ'}
			<b>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ:</b> ${dataJobApplication.resume.portfolioLink}
		`;
  }

  private buildButtons(dataJobApplication: IJobApplication) {
    if (
      [
        EnumJobApplicationStatus.REJECTION,
        EnumJobApplicationStatus.ACCEPT,
      ].includes(dataJobApplication.status)
    ) {
      return undefined; // ‚ùå –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∏–ª–∏ –ø—Ä–∏–Ω—è—Ç–æ
    }

    switch (dataJobApplication.status) {
      case EnumJobApplicationStatus.NO_REVIEW:
        return Markup.inlineKeyboard([
          [
            Markup.button.callback(
              'üü° –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å',
              `review_${dataJobApplication.id}`,
            ),
          ],
          [
            Markup.button.callback(
              'üî¥ –û—Ç–∫–∞–∑–∞—Ç—å',
              `reject_${dataJobApplication.id}`,
            ),
          ],
        ]).reply_markup;

      case EnumJobApplicationStatus.REVIEW:
        return Markup.inlineKeyboard([
          [
            Markup.button.callback(
              'üü¢ –ü—Ä–∏–Ω—è—Ç—å',
              `accept_${dataJobApplication.id}`,
            ),
          ],
          [
            Markup.button.callback(
              'üî¥ –û—Ç–∫–∞–∑–∞—Ç—å',
              `reject_${dataJobApplication.id}`,
            ),
          ],
        ]).reply_markup;

      default:
        return undefined; // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –∫–Ω–æ–ø–∫–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    }
  }

  public async sendMessage(ctx: IContext, idJobApplication: number) {
    const dataJobApplication =
      await this.jobApplicationsApi.getDetailById(idJobApplication);
    const message = this.buildMessage(dataJobApplication);
    const buttons = this.buildButtons(dataJobApplication);

    const options: any = {
      caption: message,
      parse_mode: 'HTML',
      reply_markup: buttons,
    };
    await ctx.telegram.sendMessage(this.targetChannel, message, options);

    /*
		else if (resume.type === ResumeType.FILE && resume.link) {
			await ctx.telegram.sendDocument(this.targetChannel, {
        url: resume.link,
        filename: `resume_${dataJobApplication.id}.pdf`
      }, options);
		}
		 */
  }
}
