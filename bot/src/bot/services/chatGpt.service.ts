import { Injectable } from '@nestjs/common';
import * as process from 'node:process';
import * as fs from 'fs';
import * as path from 'path';
import OpenAI from 'openai';
import pdfParse from 'pdf-parse';

@Injectable()
export class ChatGptService {
  private openai: OpenAI;
  private directory = `./uploads/data_chat_gpt/`;

  constructor() {
    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
  }

  async askGPT(message: string): Promise<string> {
    const files = await this.getAllFiles(this.directory);

    if (!files) {
      return '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–≤–µ—Ç–∞.';
    }

    try {
      // 1. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–æ–≤
      const fullText = await this.getTextFiles(files);
      // 2. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç GPT)
      const maxChars = 6000;
      const trimmedText = fullText.slice(0, maxChars);
      // 3. –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç
      const systemPrompt =
        '–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º—É.';
      const knowledgePrompt = `–í–æ—Ç –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:\n${trimmedText}`;
      // 4. –ó–∞–ø—Ä–æ—Å –∫ OpenAI
      const response = await this.openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'system', content: knowledgePrompt },
          { role: 'user', content: message },
        ],
      });

      return response.choices[0].message.content || '‚ùå –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω';
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI:', error);
      return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞';
    }
  }

  private async getAllFiles(directory: string): Promise<string[]> {
    const files = await fs.promises.readdir(directory);
    const result: string[] = [];

    for (const file of files) {
      const filePath = path.join(directory, file);
      const stat = await fs.promises.stat(filePath);
      if (stat.isFile()) {
        result.push(filePath);
      }
    }
    return result;
  }

  private async getTextFiles(filePaths: string[]): Promise<string> {
    const chunks: string[] = [];

    for (const filePath of filePaths) {
      const text = await this.extractText(filePath); // —Ç–≤–æ–π —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥
      chunks.push(`üìÑ ${path.basename(filePath)}:\n${text}`);
    }
    return chunks.join('\n\n');
  }

  private async extractText(filePath: string): Promise<string> {
    const ext = path.extname(filePath).toLowerCase();

    if (ext === '.txt') {
      return fs.readFileSync(filePath, 'utf-8');
    } else if (ext === '.pdf') {
      const data = await pdfParse(fs.readFileSync(filePath));
      return data.text;
    } else if (ext === '.docx') {
      return 'DOCX —Ñ–∞–π–ª—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è';
    } else {
      return '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞';
    }
  }
}
