import { Action, Ctx, Update } from 'nestjs-telegraf';
import { JobApplicationsService } from '../../api/job_applications/job_applications.service';
import { ReferralsService } from '../../api/referrals/referrals.service';
import { IContext } from '../../interfaces/context.interface';
import { errorUtils } from '../utils/error.utils';
import { statusJobApplicationUtils } from '../utils/statusJobApplication.utils';

@Update()
export class ReferralsAction {
  constructor(
    private readonly referralsService: ReferralsService,
    private readonly jobApplicationsApi: JobApplicationsService,
  ) {}

  @Action('my_referrals')
  async myReferrals(@Ctx() ctx: IContext) {
    try {
      const idTg = ctx.from?.id?.toString();
      if (!idTg) {
        return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à Telegram ID.');
      }

      const invitedUsers =
        await this.referralsService.getInvitedUsersByIdTg(idTg);

      // id –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const allIdReferred = invitedUsers.map(
        (referral) => referral.referred.id,
      );

      // –≤—Å–µ –æ—Ç–∫–ª–∏–∫–∏ getAllByUserId
      const allJobAplication =
        await this.jobApplicationsApi.getAllByUsersIds(allIdReferred);

      if (allJobAplication.length > 0) {
        const message = allJobAplication
          .map((item, index) => {
            return `üìù <b>–û—Ç–∫–ª–∏–∫ ${index + 1}</b>\n<b>–í–∞–∫–∞–Ω—Å–∏—è:</b> ${item.vacancy?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n<b>–§–ò–û:</b> ${item.user?.profile?.fullName || '‚Äî'}\n<b>–ì–æ—Ä–æ–¥:</b> ${item.user?.profile?.city || '‚Äî'}\n<b>–°—Ç–∞—Ç—É—Å:</b> ${statusJobApplicationUtils(item.status)} `;
          })
          .join('\n\n');
        await ctx.reply(message, { parse_mode: 'HTML' });
      } else {
        await ctx.reply(
          'üöÄ –ü–æ–∫–∞ —É –≤–∞—Å –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ ‚Äî —Å–∞–º–æ–µ –≤—Ä–µ–º—è —ç—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å!',
        );
      }
    } catch (error) {
      await errorUtils(ctx, error as Error);
    }
  }
}

/*


 
 */

/*
	@Action('myRef')
	async my_ref(@Ctx() ctx: IContext) {
	    const invitedUsers = await this.userService.getInvitedUsers(ctx.from.id);
	
	    if (!invitedUsers || invitedUsers.length === 0) {
				await ctx.reply('‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.');
	    } else {
				let message = 'üë• <b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:</b>\n\n';
	
	    for (const invited of invitedUsers) {
	        try {
	            // üîç –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ `getUserNameFromTelegram` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É
	            let nameUser = await this.tgService.getUserNameFromTelegram(invited.idTg);
	            nameUser = typeof nameUser === 'string' ? nameUser : '–ü—Ä–æ—Ñ–∏–ª—å';
	
	            // ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π HTML –¥–ª—è —Å—Å—ã–ª–∫–∏
	            const tgLink = `<a href="tg://user?id=${invited.idTg}">${nameUser}</a>`;
	
	            message += `üîπ ${tgLink} - –ü—Ä–∏–≥–ª–∞—Å–∏–ª\n`;
	        } catch (error) {
	            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –¥–ª—è ${invited.idTg}:`, error);
	            message += `üîπ <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>\n`;
	        }
	    }
	
	    await ctx.reply(message, { parse_mode: 'HTML' });
	    }
			/*
	   
	   
			 */
